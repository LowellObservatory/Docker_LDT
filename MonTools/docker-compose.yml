version: '3.7'

services:
  influxdb:
    image: 'influxdb:${INFLUXDB_VERSION}-alpine'
    container_name: 'influxdb'
    environment:
      INFLUXDB_LOGGING_LEVEL: debug
    ports: 
      - 8086:8086
      - 8088:8088
      - 8089:8089/udp
      - 25826:25826/udp
    volumes:
      - ${DCDATADIR}/influxdb:/var/lib/influxdb
      - ${DCDATADIR}/logs/influxdb:/var/log/influxdb
      - ${DCDEVDIR}/config/influxdb.conf:/etc/influxdb/influxdb.conf:ro
      - ${DCDEVDIR}/influxbackupdump/:/home/influxbackups/
      - ${DCDEVDIR}/extras/types.db:/usr/share/types.db
    networks:
      - default
    user: ${DCUSERID}:${DCGRPID}
    dns:
      - 10.11.131.100
    logging:
      driver: "json-file"
      options:
        max-size: 100m
        max-file: "3"
    restart: always

  chronograf:
    image: 'chronograf:${CHRONOGRAF_VERSION}-alpine'
    container_name: 'chronograf'
    ports: 
      - 8888:8888
    volumes:
      - ${DCDATADIR}/logs/chronograf:/var/log/chronograf
      - ${DCDATADIR}/chronograf:/var/lib/chronograf
    depends_on:
      - "influxdb"
      - "telegraf"
    networks:
      - default
    user: ${DCUSERID}:${DCGRPID}
    dns:
      - 10.11.131.100
    restart: always

  kapacitor:
    image: 'kapacitor:${KAPACITOR_VERSION}-alpine'
    container_name: 'kapacitor'
    ports: 
      - 9092:9092
    volumes:
      - ${DCDEVDIR}/config/kapacitor.conf:/etc/kapacitor/kapacitor.conf
      - ${DCDATADIR}/logs/kapacitor:/var/log/kapacitor
      - ${DCDATADIR}/kapacitor:/var/lib/kapacitor
    depends_on:
      - "chronograf"
    networks:
      - default
    user: ${DCUSERID}:${DCGRPID}
    dns:
      - 10.11.131.100
    restart: always

  telegraf:
    build: 
      context: '.'
      dockerfile: 'telegrafDockerfile'
      args:
        - version=${TELEGRAF_VERSION}
        - userid=${DCUSERID}
        - groupid=${DCGRPID}
        - dockergid=${DCDOCKERID}
    image: 'telegraf/telegrafuserland:${TELEGRAF_VERSION}-alpine'
    container_name: 'telegraf'
    privileged: true
    environment:
      HOST_PROC: /rootfs/proc
      HOST_SYS: /rootfs/sys
      HOST_ETC: /rootfs/etc
    hostname: telegrafDocker
    volumes:
      - ${DCDATADIR}/logs/telegraf/:/var/log/
      - ${DCDEVDIR}/config/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - /sys:/rootfs/sys:ro
      - /proc:/rootfs/proc:ro
      - /etc:/rootfs/etc:ro
      - /var/run/utmp:/var/run/utmp
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DCDEVDIR}/mibs/:/home/telegraf/.snmp/mibs/
    depends_on:
      - 'influxdb'
    network_mode: "host"
        #networks:
        #      - default
    user: ${DCUSERID}
    dns:
      - 10.11.131.100
    restart: always

  telegrafBridgeOnly:
    image: 'telegraf/telegrafuserland:${TELEGRAF_VERSION}-alpine'
    container_name: 'telegrafBridgeOnly'
    privileged: true
    environment:
      HOST_PROC: /rootfs/proc
      HOST_SYS: /rootfs/sys
      HOST_ETC: /rootfs/etc
    hostname: telegrafDocker
    volumes:
      - ${DCDATADIR}/logs/telegraf/:/var/log/
      - ${DCDEVDIR}/config/telegrafBridgeOnly.conf:/etc/telegraf/telegraf.conf:ro
      - /sys:/rootfs/sys:ro
      - /proc:/rootfs/proc:ro
      - /etc:/rootfs/etc:ro
      - /var/run/utmp:/var/run/utmp
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DCDEVDIR}/mibs/:/home/telegraf/.snmp/mibs/
    depends_on:
      - 'influxdb'
    networks:
      - default
    user: ${DCUSERID}
    dns:
      - 10.11.131.100
    restart: always

  telegrafTrapper:
    image: 'telegraf/telegrafuserland:${TELEGRAF_VERSION}-alpine'
    container_name: 'telegrafTrapper'
    privileged: true
    environment:
      HOST_PROC: /rootfs/proc
      HOST_SYS: /rootfs/sys
      HOST_ETC: /rootfs/etc
    hostname: telegraf-trapperDocker
    volumes:
      - ${DCDATADIR}/logs/telegraf/:/var/log/
      - ${DCDEVDIR}/config/telegrafTrapper.conf:/etc/telegraf/telegraf.conf:ro
      - /sys:/rootfs/sys:ro
      - /proc:/rootfs/proc:ro
      - /etc:/rootfs/etc:ro
      - /var/run/utmp:/var/run/utmp
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DCDEVDIR}/mibs/:/home/telegraf/.snmp/mibs/
    ports:
      - 162:162/udp
    depends_on:
      - 'influxdb'
    networks:
      - default
    user: ${DCUSERID}
    dns:
      - 10.11.131.100
    restart: always

  grafanaRenderer:
    image: grafana/grafana-image-renderer:latest
    container_name: 'grafanaRenderer'
    ports:
      - 8081

  grafana:
    build: 
      context: ./
      dockerfile: 'grafanaDockerfile'
      args:
        - GRAFANA_VERSION=${GRAFANA_VERSION}
        - GF_INSTALL_IMAGE_RENDERER_PLUGIN=false
        - GF_PLUGIN_NEWPATH=/home/grafana/plugins/
        - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,natel-discrete-panel,vonage-status-panel,fetzerch-sunandmoon-datasource,ryantxu-ajax-panel,jdbranham-diagram-panel,natel-plotly-panel,fatcloud-windrose-panel,michaeldmoore-annunciator-panel,blackmirror1-statusbygroup-panel,natel-influx-admin-panel,grafana-polystat-panel,flant-statusmap-panel,mtanda-histogram-panel,alexanderzobnin-zabbix-app,innius-video-panel,agenty-flowcharting-panel,aceiot-svg-panel,redis-datasource,redis-app
    environment:
      GF_RENDERING_SERVER_URL: http://grafanaRenderer:8081/render
      GF_RENDERING_CALLBACK_URL: http://grafana:3000/
      GF_LOG_FILTERS: rendering:debug
    image: 'grafana/grafana:${GRAFANA_VERSION}_wplugs'
    container_name: 'grafana'
    ports:
      - 3000:3000
    volumes:
      - ${DCDEVDIR}/config/grafana.ini:/etc/grafana/grafana.ini
      - ${DCDEVDIR}/extras/lowell_logo_large_transparentbg.png:/usr/share/grafana/public/img/lowell.png
      - ${DCDATADIR}/grafana/:/var/lib/grafana/
      - ${DCDATADIR}/logs/grafana:/var/log/grafana
    depends_on:
      - 'influxdb'
    networks:
      - default
    env_file:
      - config/grafana_smtp.conf
    user: ${DCUSERID}:${DCGRPID}
    dns:
      - 10.11.131.100
    restart: always

  loki:
    image: grafana/loki:${LOKI_VERSION}
    container_name: loki
    ports:
      - "3100:3100"
    volumes: 
      - ${DCDEVDIR}/config/loki-config.yaml:/etc/loki/local-config.yaml
      - ${DCDATADIR}/loki:/tmp/loki
    command: -print-config-stderr -log-config-reverse-order -config.file=/etc/loki/local-config.yaml
    user: ${DCUSERID}:${DCGRPID}
    restart: always
    dns:
      - 10.11.131.100
    networks:
      - default

  logstash:
    image: grafana/logstash-output-loki:${LOKI_VERSION}-amd64
    container_name: logstash
    ports:
      - "5400:5400"
      - "9600:9600"
    volumes: 
      - ${DCDEVDIR}/config/logstash-toloki.conf:/home/logstash/logstash-toloki.conf
      - ${DCDEVDIR}/config/logstash.yml:/usr/share/logstash/config/logstash.yml
#      - ${DCDATADIR}/logstash:/usr/share/logstash/data/
    command: -f logstash-toloki.conf
#    user: ${DCUSERID}:${DCGRPID}
    restart: always
    dns:
      - 10.11.131.100
    networks:
      - default

  redis:
    container_name: redis
    image: redis:${REDIS_VERSION}-alpine
    ports:
      - 6379:6379
    volumes:
      - ${DCDATADIR}/redis:/var/lib/redis
      - ${DCDEVDIR}/config/redis.conf:/usr/local/etc/redis/redis.conf
      - /etc/localtime:/etc/localtime:ro
    networks:
      - default
    restart: always
    dns:
      - 10.11.131.100
    networks:
      - default

networks:
    default:
        name: ligDockernetPub
        external: true

